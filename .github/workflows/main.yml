name: CI

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.x'

      - name: Download dependencies
        run: go mod download

      - name: Test
        run: go test ./...

  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: golangci
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: destinyxus/futureletterbot
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Server
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - name: Executing remote SSH commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
                    export DB_PORT=${{ secrets.DB_PORT }}
                    export DB_USER=${{ secrets.DB_USER }}
                    export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
                    export DB_NAME=${{ secrets.DB_NAME }}
                    export TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
                    export DB_HOST=${{ secrets.DB_HOST }}
                    export EMAIL_TOKEN=${{ secrets.EMAIL_TOKEN }}
                    export CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }}
                    export HOST_EMAIL=${{ secrets.HOST_EMAIL }}
                    export SMTP=${{ secrets.SMTP }}
                    export POSTGRES_DB=${{ secrets.DB_NAME }}
                    export POSTGRES_USER=${{ secrets.DB_USER }}
                    export POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
                    
                    docker pull destinyxus/futureletterbot:latest
                    
#                    docker stop telegram-bot
                    
#                    docker rm telegram-bot
                    
                    docker run -d --name telegram-bot \
                    --network botlettertofuture_mynet \
                    -p 8080:8080 \
                    -e TELEGRAM_TOKEN=${TELEGRAM_TOKEN} \
                    -e DB_HOST=${DB_HOST} \
                    -e DB_PORT=${DB_PORT} \
                    -e DB_USER=${DB_USER} \
                    -e DB_PASSWORD=${DB_PASSWORD} \
                    -e DB_NAME=${DB_NAME} \
                    -e EMAIL_TOKEN=${EMAIL_TOKEN} \
                    -e CLIENT_EMAIL=${CLIENT_EMAIL} \
                    -e HOST_EMAIL=${HOST_EMAIL} \
                    -e SMTP=${SMTP} \
                    --restart always \
                    destinyxus/futureletterbot:latest
                    
                    
#                    docker image prune -af